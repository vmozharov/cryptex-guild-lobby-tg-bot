generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("APP_DATABASE_URL")
}

model user {
  id                  Int                  @id @unique @default(autoincrement())
  active              Boolean              @default(true)
  excluded            Boolean              @default(false)
  scores              Int                  @default(0)
  admin_type          admin_type?          @relation(fields: [admin_type_id], references: [id])
  admin_type_id       Int?
  telegram_user       telegram_user        @relation(fields: [telegram_user_id], references: [telegram_id])
  telegram_user_id    String               @unique
  created_at          DateTime             @default(now())
  updated_at          DateTime             @updatedAt
  subscription        user_subscription    @relation(fields: [subscription_id], references: [id])
  subscription_id     Int                  @unique
  sent_telegram_mails sent_telegram_mail[]
  score_from_admin    history_scores[]     @relation("score_from_admin")
  score_to_user       history_scores[]     @relation("score_to_user")
  generated_link      generated_link[]
}

model telegram_user {
  telegram_id String   @id @unique
  deleted     Boolean  @default(false)
  updated_at  DateTime @updatedAt
  user        user?
}

model history_scores {
  id             Int  @id @unique @default(autoincrement())
  admin          user @relation("score_from_admin", fields: [admin_id], references: [id])
  admin_id       Int
  target_user    user @relation("score_to_user", fields: [target_user_id], references: [id])
  target_user_id Int
  scores         Int
}

model admin_type {
  id               Int     @id @unique @default(autoincrement())
  name             String  @unique
  access_to_scores Boolean @default(false)
  full_access      Boolean @default(false)
  users            user[]
}

model user_subscription {
  id       Int                           @id @default(autoincrement())
  user     user?
  active   Boolean                       @default(false)
  price    history_of_subscription_price @relation(fields: [price_id], references: [id])
  price_id Int
  end_date DateTime?
}

model history_of_subscription_price {
  id                 Int                 @id @unique @default(autoincrement())
  price              Int
  created_at         DateTime            @default(now())
  user_subscriptions user_subscription[]
}

model sent_telegram_mail {
  id         Int      @id @unique @default(autoincrement())
  user       user     @relation(fields: [user_id], references: [id])
  user_id    Int
  success    Boolean  @default(false)
  mail_type  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model settings {
  name  String  @id @unique
  value String?
}

model telegram_channel {
  telegram_id     String           @id @unique
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  is_chat         Boolean          @default(false)
  generated_links generated_link[]
}

model generated_link {
  id                  Int              @id @unique @default(autoincrement())
  link                String
  user                user             @relation(fields: [user_id], references: [id])
  user_id             Int
  telegram_channel    telegram_channel @relation(fields: [telegram_channel_id], references: [telegram_id])
  telegram_channel_id String
  expired_date        Int
  created_at          DateTime         @default(now())
  updated_at          DateTime         @updatedAt
}

model level {
  id       Int    @id @unique @default(autoincrement())
  level    Int    @unique
  name     String @unique
  score    Int    @unique
  discount Int    @default(0)
}
